import { Alert } from "@mui/material";
import { useNavigate, useParams } from "react-router-dom";
import { Container } from "../../../shared/ui/Container";
import { Grid } from "../../../shared/ui/Grid";
import { QuestionCard } from "../../../shared/ui/QuestionCard";
import { useQuestions } from "../../../features/questions";
import { getTopicById } from "../../../features/topics/api/topicsApi";
import { Question } from "../../../shared/types/question";
import { Topic } from "../../../shared/types/topic";
import Button from "../../../shared/ui/Button";
import { 
  PageHeader, 
  PageHero, 
  EmptyState, 
  LoadingState 
} from "../../../shared/components";
import { NotFoundContainer, NotFoundTitle } from "../../../shared/ui/StyledComponents";
import { useState, useEffect } from "react";

const QuestionsPage = () => {
  const navigate = useNavigate();
  const { topicId } = useParams<{ topicId: string }>();
  const { questions, isLoading: questionsLoading, error: questionsError } = useQuestions(topicId || "");
  
  const [currentTopic, setCurrentTopic] = useState<Topic | null>(null);
  const [topicLoading, setTopicLoading] = useState(false);
  const [topicError, setTopicError] = useState<string | null>(null);

  useEffect(() => {
    const loadTopic = async () => {
      if (!topicId) return;
      
      setTopicLoading(true);
      setTopicError(null);
      
      try {
        const topic = await getTopicById(topicId);
        setCurrentTopic(topic);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º—ã:", error);
        setTopicError(error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
      } finally {
        setTopicLoading(false);
      }
    };

    loadTopic();
  }, [topicId]);

  const isLoading = questionsLoading || topicLoading;

  const handleSelectQuestion = (question: Question) => {
    console.log("–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:", question.text);
    // TODO: navigate(`/question/${question.id}/answer`);
  };

  if (isLoading) {
    return <LoadingState message="–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã..." />;
  }

  if (!currentTopic && !topicLoading) {
    return (
      <NotFoundContainer>
        <NotFoundTitle variant="h4">
          {topicError ? "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º—ã" : "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        </NotFoundTitle>
        {topicError && (
          <Alert severity="error" sx={{ mb: 2, maxWidth: "400px" }}>
            {topicError}
          </Alert>
        )}
        <Button
          variant="secondary"
          onClick={() => navigate("/study-plans")}
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
        </Button>
      </NotFoundContainer>
    );
  }

  if (!currentTopic) {
    return <LoadingState message="–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É..." />;
  }

  const heroStats = questions.length > 0 ? [
    { icon: "‚ùì", label: "–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤", value: questions.length },
    { 
      icon: "üìä", 
      label: "–°–ª–æ–∂–Ω–æ—Å—Ç—å", 
      value: questions.length > 0 ? "–°–º–µ—à–∞–Ω–Ω–∞—è" : "‚Äî" 
    }
  ] : undefined;

  return (
    <>
      <PageHeader 
        title={currentTopic.name} 
        icon="‚ùì" 
        backTo={`/course/${currentTopic.planId}`}
      />

      <Container maxWidth="xl" sx={{ py: { xs: 4, md: 6 } }}>
        <PageHero
          title="–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ"
          subtitle="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π"
          stats={heroStats}
        />

        {questionsError && (
          <Alert
            severity="error"
            sx={{
              mb: 4,
              maxWidth: "600px",
              mx: "auto",
              backgroundColor: "rgba(255, 255, 255, 0.95)",
              borderRadius: "16px",
              "& .MuiAlert-message": {
                color: "#d32f2f",
                fontWeight: 500,
              },
              "& .MuiAlert-icon": {
                color: "#d32f2f",
              },
            }}
          >
            {questionsError}
          </Alert>
        )}

        {questions.length === 0 && !questionsError ? (
          <EmptyState
            icon="‚ùì"
            title="–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
            description="–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
          />
        ) : (
          <Grid container spacing={{ xs: 3, md: 4 }}>
            {questions.map((question) => (
              <Grid key={question.id} size={{ xs: 12, sm: 6, lg: 4 }}>
                <QuestionCard
                  question={question}
                  onSelect={handleSelectQuestion}
                />
              </Grid>
            ))}
          </Grid>
        )}
      </Container>
    </>
  );
};

export default QuestionsPage;