import { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import {
  Typography,
  Box,
  Alert,
  Chip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Paper,
} from "@mui/material";
import { Container } from "../../../shared/ui/Container";
import { Card } from "../../../shared/ui/Card";
import Button from "../../../shared/ui/Button";
import { getQuestionById } from "../../../features/questions/api/questionsApi";
import { getTopicById } from "../../../features/topics/api/topicsApi";
import { useProgress } from "../../../features/progress";
import {
  Question,
  DIFFICULTY_LABELS,
  DIFFICULTY_COLORS,
  DifficultyLevel,
} from "../../../shared/types/question";
import { Topic } from "../../../shared/types/topic";
import { PageHeader, LoadingState } from "../../../shared/components";
import {
  NotFoundContainer,
  NotFoundTitle,
} from "../../../shared/ui/StyledComponents";

const QuestionStudyPage = () => {
  const navigate = useNavigate();
  const { questionId } = useParams<{ questionId: string }>();

  const [question, setQuestion] = useState<Question | null>(null);
  const [topic, setTopic] = useState<Topic | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showAnswer, setShowAnswer] = useState(false);
  const [userAnswer, setUserAnswer] = useState<boolean | null>(null);

  const {
    progress,
    submitAnswer,
    getAnswerForQuestion,
    resetQuestionProgress,
  } = useProgress(topic?.id || "");

  useEffect(() => {
    const loadQuestionAndTopic = async () => {
      if (!questionId) return;

      setIsLoading(true);
      setError(null);

      try {
        console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å:", questionId);
        const questionData = await getQuestionById(questionId);

        if (!questionData) {
          setError("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
          return;
        }

        setQuestion(questionData);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É
        const topicData = await getTopicById(questionData.topicId);
        setTopic(topicData);

        console.log("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", {
          question: questionData,
          topic: topicData,
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", error);
        setError(error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
      } finally {
        setIsLoading(false);
      }
    };

    loadQuestionAndTopic();
  }, [questionId]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
  useEffect(() => {
    if (question) {
      const existingAnswer = getAnswerForQuestion(question.id);
      if (existingAnswer) {
        setUserAnswer(existingAnswer.isCorrect);
        setShowAnswer(true);
      }
    }
  }, [question, getAnswerForQuestion]);

  const handleAnswerSubmit = async (isCorrect: boolean) => {
    if (!question || !topic) return;

    try {
      setUserAnswer(isCorrect);
      await submitAnswer(question.id, isCorrect);
      setShowAnswer(true);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:", error);
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    }
  };
  const handleResetQuestionProgress = async () => {
    if (!question || !topic) return;

    try {
      await resetQuestionProgress(question.id);
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–±—Ä–æ—Å–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setUserAnswer(null);
      setShowAnswer(false);

      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–±—Ä–æ—Å–µ
      console.log("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–ø—Ä–æ—Å—É —Å–±—Ä–æ—à–µ–Ω");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", error);
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    }
  };
  const handleBackToQuestions = () => {
    if (topic) {
      navigate(`/topic/${topic.id}/questions`);
    }
  };

  if (isLoading) {
    return <LoadingState message="–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å..." />;
  }

  if (error || !question || !topic) {
    return (
      <NotFoundContainer>
        <NotFoundTitle variant="h4">
          {error || "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        </NotFoundTitle>
        <Button variant="secondary" onClick={() => navigate("/study-plans")}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
        </Button>
      </NotFoundContainer>
    );
  }

  const difficultyColor =
    DIFFICULTY_COLORS[question.difficulty as DifficultyLevel] || "#757575";
  const difficultyLabel =
    DIFFICULTY_LABELS[question.difficulty as DifficultyLevel] ||
    question.difficulty;

  return (
    <>
      <PageHeader
        title={`–í–æ–ø—Ä–æ—Å #${question.queue}`}
        icon="üí°"
        backTo={`/topic/${topic.id}/questions`}
      />

      <Container maxWidth="lg" sx={{ py: { xs: 4, md: 6 } }}>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–µ */}
        <Card sx={{ mb: 4, p: { xs: 3, md: 4 } }}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "flex-start",
              mb: 3,
            }}
          >
            <Typography
              variant="h4"
              sx={{
                fontWeight: 700,
                color: "#ffffff",
                textShadow: "0 2px 4px rgba(0, 0, 0, 0.3)",
                flex: 1,
                mr: 2,
              }}
            >
              –í–æ–ø—Ä–æ—Å #{question.queue}
            </Typography>

            <Chip
              label={difficultyLabel}
              sx={{
                backgroundColor: difficultyColor,
                color: "#ffffff",
                fontWeight: 600,
                fontSize: "0.875rem",
                height: "32px",
              }}
            />
          </Box>

          <Typography
            variant="h6"
            sx={{
              color: "rgba(255, 255, 255, 0.9)",
              lineHeight: 1.6,
              fontSize: { xs: "1.1rem", md: "1.25rem" },
              mb: 3,
            }}
          >
            {question.text}
          </Typography>
        </Card>

        {/* –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã */}
        {(question.educationalMaterialsText ||
          question.educationalMaterialsLinks.length > 0) && (
          <Card sx={{ mb: 4, p: { xs: 3, md: 4 } }}>
            <Typography
              variant="h5"
              sx={{
                fontWeight: 700,
                color: "#ffffff",
                mb: 3,
                display: "flex",
                alignItems: "center",
                gap: 1,
              }}
            >
              üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
            </Typography>

            {question.educationalMaterialsText && (
              <Paper
                sx={{
                  p: 3,
                  mb: 3,
                  backgroundColor: "rgba(255, 255, 255, 0.1)",
                  borderRadius: "16px",
                  border: "1px solid rgba(255, 255, 255, 0.2)",
                }}
              >
                <Typography
                  variant="body1"
                  sx={{
                    color: "rgba(255, 255, 255, 0.9)",
                    lineHeight: 1.7,
                    fontSize: "1rem",
                    whiteSpace: "pre-wrap",
                  }}
                >
                  {question.educationalMaterialsText}
                </Typography>
              </Paper>
            )}

            {question.educationalMaterialsLinks.length > 0 && (
              <Box>
                <Typography
                  variant="h6"
                  sx={{
                    color: "rgba(255, 255, 255, 0.9)",
                    mb: 2,
                    fontWeight: 600,
                  }}
                >
                  üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
                </Typography>

                <List>
                  {question.educationalMaterialsLinks.map((link, index) => (
                    <ListItem
                      key={index}
                      sx={{
                        backgroundColor: "rgba(255, 255, 255, 0.05)",
                        borderRadius: "12px",
                        mb: 1,
                        border: "1px solid rgba(255, 255, 255, 0.1)",
                      }}
                    >
                      <ListItemIcon>
                        <Typography sx={{ fontSize: "1.2rem" }}>üåê</Typography>
                      </ListItemIcon>
                      <ListItemText>
                        <Typography
                          component="a"
                          href={link}
                          target="_blank"
                          rel="noopener noreferrer"
                          sx={{
                            color: "#64b5f6",
                            textDecoration: "none",
                            "&:hover": {
                              textDecoration: "underline",
                              color: "#90caf9",
                            },
                          }}
                        >
                          {link}
                        </Typography>
                      </ListItemText>
                    </ListItem>
                  ))}
                </List>
              </Box>
            )}
          </Card>
        )}
        <Card sx={{ mb: 4, p: { xs: 3, md: 4 } }}>
          {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ */}
          {!showAnswer && (
            <Box
              sx={{
                display: "flex",
                gap: 2,
                justifyContent: "center",
                flexWrap: "wrap",
              }}
            >
              <Button
                variant="primary"
                size="large"
                onClick={() => handleAnswerSubmit(true)}
                sx={{ minWidth: "200px" }}
              >
                ‚úÖ –ó–Ω–∞—é –æ—Ç–≤–µ—Ç
              </Button>
              <Button
                variant="secondary"
                size="large"
                onClick={() => handleAnswerSubmit(false)}
                sx={{ minWidth: "200px" }}
              >
                ‚ùå –ù–µ –∑–Ω–∞—é
              </Button>
            </Box>
          )}

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ */}
          {showAnswer && userAnswer !== null && (
            <Alert
              severity={userAnswer ? "success" : "info"}
              sx={{
                backgroundColor: userAnswer
                  ? "rgba(76, 175, 80, 0.2)"
                  : "rgba(33, 150, 243, 0.2)",
                borderRadius: "16px",
                "& .MuiAlert-message": {
                  color: "#ffffff",
                  fontWeight: 500,
                },
                "& .MuiAlert-icon": {
                  color: "#ffffff",
                },
              }}
            >
              {userAnswer
                ? "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–Ω–∞–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."
                : "–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å! –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∏–∂–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
            </Alert>
          )}
        </Card>
        {/* –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç */}
        {showAnswer && question.modelAnswer && (
          <Card sx={{ mb: 4, p: { xs: 3, md: 4 } }}>
            <Typography
              variant="h5"
              sx={{
                fontWeight: 700,
                color: "#ffffff",
                mb: 3,
                display: "flex",
                alignItems: "center",
                gap: 1,
              }}
            >
              üí° –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            </Typography>

            <Paper
              sx={{
                p: 3,
                backgroundColor: "rgba(76, 175, 80, 0.1)",
                borderRadius: "16px",
                border: "1px solid rgba(76, 175, 80, 0.3)",
              }}
            >
              <Typography
                variant="body1"
                sx={{
                  color: "rgba(255, 255, 255, 0.9)",
                  lineHeight: 1.7,
                  fontSize: "1rem",
                  whiteSpace: "pre-wrap",
                }}
              >
                {question.modelAnswer}
              </Typography>
            </Paper>
          </Card>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
        {progress && (
          <Card sx={{ mb: 4, p: { xs: 3, md: 4 } }}>
            <Typography
              variant="h5"
              sx={{
                fontWeight: 700,
                color: "#ffffff",
                mb: 3,
                display: "flex",
                alignItems: "center",
                gap: 1,
              }}
            >
              üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–µ
            </Typography>

            <Box sx={{ display: "flex", gap: 3, flexWrap: "wrap" }}>
              <Box
                sx={{
                  backgroundColor: "rgba(255, 255, 255, 0.1)",
                  borderRadius: "16px",
                  p: 2,
                  minWidth: "120px",
                  textAlign: "center",
                }}
              >
                <Typography
                  variant="h4"
                  sx={{ color: "#4caf50", fontWeight: 700 }}
                >
                  {progress.score}%
                </Typography>
                <Typography
                  variant="body2"
                  sx={{ color: "rgba(255, 255, 255, 0.7)" }}
                >
                  –û–±—â–∏–π —Å—á–µ—Ç
                </Typography>
              </Box>

              <Box
                sx={{
                  backgroundColor: "rgba(255, 255, 255, 0.1)",
                  borderRadius: "16px",
                  p: 2,
                  minWidth: "120px",
                  textAlign: "center",
                }}
              >
                <Typography
                  variant="h4"
                  sx={{ color: "#2196f3", fontWeight: 700 }}
                >
                  {Object.keys(progress.answers).length}
                </Typography>
                <Typography
                  variant="body2"
                  sx={{ color: "rgba(255, 255, 255, 0.7)" }}
                >
                  –û—Ç–≤–µ—á–µ–Ω–æ
                </Typography>
              </Box>

              <Box
                sx={{
                  backgroundColor: "rgba(255, 255, 255, 0.1)",
                  borderRadius: "16px",
                  p: 2,
                  minWidth: "120px",
                  textAlign: "center",
                }}
              >
                <Typography
                  variant="h4"
                  sx={{ color: "#ff9800", fontWeight: 700 }}
                >
                  {
                    Object.values(progress.answers).filter((a) => a.isCorrect)
                      .length
                  }
                </Typography>
                <Typography
                  variant="body2"
                  sx={{ color: "rgba(255, 255, 255, 0.7)" }}
                >
                  –ü—Ä–∞–≤–∏–ª—å–Ω–æ
                </Typography>
              </Box>
            </Box>
          </Card>
        )}

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <Box sx={{ display: "flex", justifyContent: "center", gap: 2 }}>
          <Button
            variant="secondary"
            size="large"
            onClick={handleBackToQuestions}
          >
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º
          </Button>
          <Button
            variant="secondary"
            size="large"
            onClick={handleResetQuestionProgress}
          >
            –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
          </Button>
        </Box>
      </Container>
    </>
  );
};

export default QuestionStudyPage;
